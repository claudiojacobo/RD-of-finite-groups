"""
File used for testing and running our production code 
"""


# This file was *autogenerated* from the file main.sage
from sage.all_cmdline import *   # import sage library

_sage_const_200 = Integer(200); _sage_const_100 = Integer(100); _sage_const_7 = Integer(7); _sage_const_3 = Integer(3); _sage_const_10 = Integer(10)# load("group_characters.sage")
# load("suzuki_characters.sage")
# load("psu_characters.sage")
load("helper_functions.sage")
load("PSU_3_P.sage")

import json
import os
import time
from datetime import datetime

def save_output(data, file):
    with open(file, "a") as f:
        f.write(json.dumps(data) + "\n")



# G = GroupCharacters(f"PSU(3, {q})")
# result = G.the_game(G.characters[1],10)
"""
for j in range(10):
    for a,b in [(3,3), (3,4), (5, 3), (11, 2), (2, 6), (2,7)]:
        try:
            print(a,b)
            G = GroupCharactersPSU3(a, b)
            result = G.the_game(G.characters[j], 7)
            print(result)
            result["character_index"] = f"{j}"
            save_output(result)
        except: 
            print(f"PSU({i},1 does not have a index {j} character")

"""

for a,b in get_unicorn(_sage_const_100 ):
    c, d = b.split(',')
    c = int(c)
    d = int(d)
    print(c,d)
    G = GroupCharactersPSU3(c,d)
    for j, char in enumerate(G.characters):
        result = G.the_game(char, _sage_const_7 )
        print(result)
        result["character_index"] = f"{j}"
        save_output(result)
"""
G = GroupCharactersPSU3(3, 6)
result = G.the_game(G.characters[0], 7)
print(result)
save_output(result)
"""

# 31, 37, 41, 43, 47
"""
G = GroupCharactersPSU3(5, 2)
result = G.the_game(G.characters[0], 10)
print(result)
"""
# save_output(result)
"""
def get_char_sym(self, k, chi, a): 
    unicorn = get_unicorn(a) 
    for primes in range(len(get_unicorn(a)): 
        for item in primes
            if len(
        q =  unicorn[primes][0]
        G = GroupCharactersPSU3(
    #print out characters for several symmetric powers for many PSU(3,q) 
    # to go through and run all of the different groups, we just need to look thorugh e
    for i in range(2, k+1): 
        sym_power(self, chi, k) 

"""
def get_groups(a, k, chi): 
    G = GroupCharactersPSU3(_sage_const_3 , a)
    pps = G.get_unicorn(a)
    for group in range(len(pps)): 


print(get_unicorn(_sage_const_10 ))

