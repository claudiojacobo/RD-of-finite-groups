

# This file was *autogenerated* from the file PSU_3_General_Sym.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_6 = Integer(6); _sage_const_4 = Integer(4); _sage_const_25 = Integer(25); _sage_const_32 = Integer(32); _sage_const_16 = Integer(16); _sage_const_27 = Integer(27); _sage_const_17 = Integer(17)
q = var('q')
d = gcd(_sage_const_3 , q) # have to redefine that cases etc etc. 
d = _sage_const_1 
r = q+_sage_const_1 
s = q-_sage_const_1  
t = q**_sage_const_2  - q + _sage_const_1 
rp = r/d
sp = s/d
tp = t/d
dp = (_sage_const_3 -d)/_sage_const_2 
rpp = _sage_const_0  
tpp = (tp - _sage_const_1 )/_sage_const_6  
families = ['1', '2', '3^l', '4^k', '5^k', "6'", "6^klm", "7^k", "8^k"]
num_classes = {'1': _sage_const_1 , '2': _sage_const_1 , '3^l': d, '4^k': rp - _sage_const_1 , '5^k': rp - _sage_const_1 , "6'": _sage_const_1  - dp, "6^klm": tpp - rpp, "7^k": tpp - rpp - dp, "8^k": _sage_const_2 *tpp}
centralizers = {'1': q**_sage_const_3  * rp * r * s * t, '2': q**_sage_const_3  * rp, '3^l': q**_sage_const_2 , '4^k': q*rp*r*s, '5^k': q*rp, "6'": r**_sage_const_2 , "6^klm": rp*r, "7^k": rp*s, "8^k": tp}
class_sizes = {key: (q**_sage_const_3  * rp * r * s * t) / val for key, val in centralizers.items()}
character_val = {'1': q*s, '2': -_sage_const_1  * q, '3^l': _sage_const_0 , '4^k': -_sage_const_1  * s, '5^k': _sage_const_1 , "6'": _sage_const_2 , "6^klm": _sage_const_2 , "7^k": _sage_const_0 , "8^k": -_sage_const_1 }
# q = 1, 9 mod 12 
square_maps1 = {'1': {'1': _sage_const_1 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 },
            '2': {'1': _sage_const_0 , '2': _sage_const_1 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 }, 
            '3^l': {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': d, '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 },
            '4^k': {'1': _sage_const_1 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': rp - _sage_const_2 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 } , 
            '5^k': {'1': _sage_const_0 , '2': _sage_const_1 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': rp - _sage_const_2 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 }, 
            "6'": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_1  - dp, "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 }, 
            "6^klm": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': -_sage_const_1  * ceil(r/_sage_const_4 ) + floor(r/_sage_const_6 ) + r/_sage_const_2  + ceil(floor(r/_sage_const_6 )/_sage_const_2 ), '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": tpp - rpp - (-_sage_const_1  * ceil(r/_sage_const_4 ) + floor(r/_sage_const_6 ) + r/_sage_const_2  + ceil(floor(r/_sage_const_6 )/_sage_const_2 )), "7^k": _sage_const_0 , "8^k": _sage_const_0 },
            "7^k": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': rp/_sage_const_2 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": tpp - rpp - dp - rp/_sage_const_2 , "8^k": _sage_const_0 }, 
            "8^k": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_2  * tpp}}
total = _sage_const_0 
for family in families:
    total += class_sizes[family]*num_classes[family]*(character_val[family] ** _sage_const_2 )
    for fam2 in families: # iterate through the square maps 
        total += class_sizes[family]*character_val[fam2]* square_maps1[family][fam2]
total = (total/_sage_const_2 )/(q**_sage_const_3  * rp * r * s * t)
# print(total) 
print("q = 1,9 mod 12 case:")
print(total.full_simplify())
print(total.subs(q=_sage_const_25 ))

# q = 2, 8 mod 12 (p = 2, d = 3)
d = _sage_const_3  
q = var('q')
r = q+_sage_const_1 
s = q-_sage_const_1  
t = q**_sage_const_2  - q + _sage_const_1 
rp = r/d
sp = s/d
tp = t/d
dp = (_sage_const_3 -d)/_sage_const_2 
rpp = _sage_const_0  
tpp = (tp - _sage_const_1 )/_sage_const_6  
families = ['1', '2', '3^l', '4^k', '5^k', "6'", "6^klm", "7^k", "8^k"]
num_classes = {'1': _sage_const_1 , '2': _sage_const_1 , '3^l': d, '4^k': rp - _sage_const_1 , '5^k': rp - _sage_const_1 , "6'": _sage_const_1  - dp, "6^klm": tpp - rpp, "7^k": tpp - rpp - dp, "8^k": _sage_const_2 *tpp}
centralizers = {'1': q**_sage_const_3  * rp * r * s * t, '2': q**_sage_const_3  * rp, '3^l': q**_sage_const_2 , '4^k': q*rp*r*s, '5^k': q*rp, "6'": r**_sage_const_2 , "6^klm": rp*r, "7^k": rp*s, "8^k": tp}
class_sizes = {key: (q**_sage_const_3  * rp * r * s * t) / val for key, val in centralizers.items()}
character_val = {'1': q*s, '2': -_sage_const_1  * q, '3^l': _sage_const_0 , '4^k': -_sage_const_1  * s, '5^k': _sage_const_1 , "6'": _sage_const_2 , "6^klm": _sage_const_2 , "7^k": _sage_const_0 , "8^k": -_sage_const_1 }
square_maps2 = {'1': {'1': _sage_const_1 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 },
            '2': {'1': _sage_const_1 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 }, 
            '3^l': {'1': _sage_const_0 , '2': d, '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 },
            '4^k': {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': rp - _sage_const_1 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 } , 
            '5^k': {'1': _sage_const_0 , '2': _sage_const_1 , '3^l': _sage_const_0 , '4^k': rp-_sage_const_1 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 }, 
            "6'": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_1  - dp, "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 }, 
            "6^klm": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": tpp - rpp, "7^k": _sage_const_0 , "8^k": _sage_const_0 },
            "7^k": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": tpp - rpp - dp, "8^k": _sage_const_0 }, 
            "8^k": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_2  * tpp}}

total = _sage_const_0 
for family in families:
    total += class_sizes[family]*num_classes[family]*(character_val[family] ** _sage_const_2 )
    for fam2 in families: # iterate through the square maps 
        total += class_sizes[family]*character_val[fam2]* square_maps2[family][fam2]
total = (total/_sage_const_2 )/(q**_sage_const_3  * rp * r * s * t)
# print(total) 
print("q = 2,8 mod 12 case:")
print(total.full_simplify())
print(total.subs(q=_sage_const_32 ))

# q = 4,10 mod 12 (p = 2, d = 1)
d = _sage_const_1 
q = var('q')
r = q+_sage_const_1 
s = q-_sage_const_1  
t = q**_sage_const_2  - q + _sage_const_1 
rp = r/d
sp = s/d
tp = t/d
dp = (_sage_const_3 -d)/_sage_const_2 
rpp = _sage_const_0  
tpp = (tp - _sage_const_1 )/_sage_const_6  
families = ['1', '2', '3^l', '4^k', '5^k', "6'", "6^klm", "7^k", "8^k"]
num_classes = {'1': _sage_const_1 , '2': _sage_const_1 , '3^l': d, '4^k': rp - _sage_const_1 , '5^k': rp - _sage_const_1 , "6'": _sage_const_1  - dp, "6^klm": tpp - rpp, "7^k": tpp - rpp - dp, "8^k": _sage_const_2 *tpp}
centralizers = {'1': q**_sage_const_3  * rp * r * s * t, '2': q**_sage_const_3  * rp, '3^l': q**_sage_const_2 , '4^k': q*rp*r*s, '5^k': q*rp, "6'": r**_sage_const_2 , "6^klm": rp*r, "7^k": rp*s, "8^k": tp}
class_sizes = {key: (q**_sage_const_3  * rp * r * s * t) / val for key, val in centralizers.items()}
character_val = {'1': q*s, '2': -_sage_const_1  * q, '3^l': _sage_const_0 , '4^k': -_sage_const_1  * s, '5^k': _sage_const_1 , "6'": _sage_const_2 , "6^klm": _sage_const_2 , "7^k": _sage_const_0 , "8^k": -_sage_const_1 }
square_maps3 = {'1': {'1': _sage_const_1 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 },
            '2': {'1': _sage_const_1 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 }, 
            '3^l': {'1': _sage_const_0 , '2': d, '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 },
            '4^k': {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': rp - _sage_const_1 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 } , 
            '5^k': {'1': _sage_const_0 , '2': _sage_const_1 , '3^l': _sage_const_0 , '4^k': rp-_sage_const_1 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 }, 
            "6'": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_1  - dp, "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 }, 
            "6^klm": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": tpp - rpp, "7^k": _sage_const_0 , "8^k": _sage_const_0 },
            "7^k": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": tpp - rpp - dp, "8^k": _sage_const_0 }, 
            "8^k": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_2  * tpp}}

total = _sage_const_0 
for family in families:
    total += class_sizes[family]*num_classes[family]*(character_val[family] ** _sage_const_2 )
    for fam2 in families: # iterate through the square maps 
        total += class_sizes[family]*character_val[fam2]* square_maps3[family][fam2]
total = (total/_sage_const_2 )/(q**_sage_const_3  * rp * r * s * t)
# print(total) 
print("q = 4,10 mod 12 case:")
print(total.full_simplify())
print(total.subs(q=_sage_const_16 ))

# q = 3, 7 mod 12 (d = 1)
q = var('q')
d = gcd(_sage_const_3 , q) # have to redefine that cases etc etc. 
d = _sage_const_1 
r = q+_sage_const_1 
s = q-_sage_const_1  
t = q**_sage_const_2  - q + _sage_const_1 
rp = r/d
sp = s/d
tp = t/d
dp = (_sage_const_3 -d)/_sage_const_2 
rpp = _sage_const_0  
tpp = (tp - _sage_const_1 )/_sage_const_6  
families = ['1', '2', '3^l', '4^k', '5^k', "6'", "6^klm", "7^k", "8^k"]
num_classes = {'1': _sage_const_1 , '2': _sage_const_1 , '3^l': d, '4^k': rp - _sage_const_1 , '5^k': rp - _sage_const_1 , "6'": _sage_const_1  - dp, "6^klm": tpp - rpp, "7^k": tpp - rpp - dp, "8^k": _sage_const_2 *tpp}
centralizers = {'1': q**_sage_const_3  * rp * r * s * t, '2': q**_sage_const_3  * rp, '3^l': q**_sage_const_2 , '4^k': q*rp*r*s, '5^k': q*rp, "6'": r**_sage_const_2 , "6^klm": rp*r, "7^k": rp*s, "8^k": tp}
class_sizes = {key: (q**_sage_const_3  * rp * r * s * t) / val for key, val in centralizers.items()}
character_val = {'1': q*s, '2': -_sage_const_1  * q, '3^l': _sage_const_0 , '4^k': -_sage_const_1  * s, '5^k': _sage_const_1 , "6'": _sage_const_2 , "6^klm": _sage_const_2 , "7^k": _sage_const_0 , "8^k": -_sage_const_1 }
square_maps4 = {'1': {'1': _sage_const_1 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 },
            '2': {'1': _sage_const_0 , '2': _sage_const_1 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 }, 
            '3^l': {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': d, '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 },
            '4^k': {'1': _sage_const_1 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': rp - _sage_const_2 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 } , 
            '5^k': {'1': _sage_const_0 , '2': _sage_const_1 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': rp - _sage_const_2 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 }, 
            "6'": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_1  - dp, "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 }, 
            "6^klm": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': -_sage_const_1  * ceil(r/_sage_const_4 ) + floor(r/_sage_const_6 ) + r/_sage_const_2  + floor((ceil(r/_sage_const_6 ) - _sage_const_1 )/_sage_const_2 ), '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": tpp - rpp - (-_sage_const_1  * ceil(r/_sage_const_4 ) + floor(r/_sage_const_6 ) + r/_sage_const_2  + floor((ceil(r/_sage_const_6 ) - _sage_const_1 )/_sage_const_2 )), "7^k": _sage_const_0 , "8^k": _sage_const_0 },
            "7^k": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': rp/_sage_const_2 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": tpp - rpp - dp - rp/_sage_const_2 , "8^k": _sage_const_0 }, 
            "8^k": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_2  * tpp}}
total = _sage_const_0 
for family in families:
    total += class_sizes[family]*num_classes[family]*(character_val[family] ** _sage_const_2 )
    for fam2 in families: # iterate through the square maps 
        total += class_sizes[family]*character_val[fam2]* square_maps4[family][fam2]
total = (total/_sage_const_2 )/(q**_sage_const_3  * rp * r * s * t)
# print(total) 
print("q = 3,7 mod 12 case:")
print(total.full_simplify())
print(total.subs(q=_sage_const_27 ))

# q = 5 mod 12
q = var('q')
d = gcd(_sage_const_3 , q) # have to redefine that cases etc etc. 
d = _sage_const_3 
r = q+_sage_const_1 
s = q-_sage_const_1  
t = q**_sage_const_2  - q + _sage_const_1 
rp = r/d
sp = s/d
tp = t/d
dp = (_sage_const_3 -d)/_sage_const_2 
rpp = _sage_const_0  
tpp = (tp - _sage_const_1 )/_sage_const_6  
families = ['1', '2', '3^l', '4^k', '5^k', "6'", "6^klm", "7^k", "8^k"]
num_classes = {'1': _sage_const_1 , '2': _sage_const_1 , '3^l': d, '4^k': rp - _sage_const_1 , '5^k': rp - _sage_const_1 , "6'": _sage_const_1  - dp, "6^klm": tpp - rpp, "7^k": tpp - rpp - dp, "8^k": _sage_const_2 *tpp}
centralizers = {'1': q**_sage_const_3  * rp * r * s * t, '2': q**_sage_const_3  * rp, '3^l': q**_sage_const_2 , '4^k': q*rp*r*s, '5^k': q*rp, "6'": r**_sage_const_2 , "6^klm": rp*r, "7^k": rp*s, "8^k": tp}
class_sizes = {key: (q**_sage_const_3  * rp * r * s * t) / val for key, val in centralizers.items()}
character_val = {'1': q*s, '2': -_sage_const_1  * q, '3^l': _sage_const_0 , '4^k': -_sage_const_1  * s, '5^k': _sage_const_1 , "6'": _sage_const_2 , "6^klm": _sage_const_2 , "7^k": _sage_const_0 , "8^k": -_sage_const_1 }
square_maps5 = {'1': {'1': _sage_const_1 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 },
            '2': {'1': _sage_const_0 , '2': _sage_const_1 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 }, 
            '3^l': {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': d, '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 },
            '4^k': {'1': _sage_const_1 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': rp - _sage_const_2 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 } , 
            '5^k': {'1': _sage_const_0 , '2': _sage_const_1 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': rp - _sage_const_2 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 }, 
            "6'": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_1  - dp, "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_0 }, 
            "6^klm": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': r/_sage_const_6  - _sage_const_1 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": tpp - rpp - (r/_sage_const_6  - _sage_const_1 ), "7^k": _sage_const_0 , "8^k": _sage_const_0 },
            "7^k": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': rp/_sage_const_2 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": tpp - rpp - dp - rp/_sage_const_2 , "8^k": _sage_const_0 }, 
            "8^k": {'1': _sage_const_0 , '2': _sage_const_0 , '3^l': _sage_const_0 , '4^k': _sage_const_0 , '5^k': _sage_const_0 , "6'": _sage_const_0 , "6^klm": _sage_const_0 , "7^k": _sage_const_0 , "8^k": _sage_const_2  * tpp}}
total = _sage_const_0 
for family in families:
    total += class_sizes[family]*num_classes[family]*(character_val[family] ** _sage_const_2 )
    for fam2 in families: # iterate through the square maps 
        total += class_sizes[family]*character_val[fam2]* square_maps5[family][fam2]
total = (total/_sage_const_2 )/(q**_sage_const_3  * rp * r * s * t)
# print(total) 
print("q = 5 mod 12 case:")
print(total.full_simplify())
print(total.subs(q=_sage_const_17 ))

